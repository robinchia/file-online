{"version":3,"sources":["src/js/types.js","src/js/defaults.js","src/js/support.js","node_modules/loadjs/dist/loadjs.umd.js","src/js/utils.js","src/js/console.js","src/js/fullscreen.js","src/js/captions.js","src/js/ui.js","src/js/controls.js","src/js/listeners.js","src/js/storage.js","src/js/plugins/ads.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"names":["providers","types","defaults","window","navigator","language","split","range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","test","createElement","rel","href","replace","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","utils","input","this","instanceof","Plyr","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","object","keys","constructor","documentMode","documentElement","style","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","JSON","parse","responseText","response","Error","statusText","open","send","id","is","hasId","exists","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","localStorage","getItem","data","content","fetch","then","empty","setItem","stringify","catch","injectSprite","innerHTML","body","insertBefore","childNodes","prefix","Math","floor","random","self","top","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","attributes","text","setAttributes","textContent","target","removeElement","removeChild","lastChild","newChild","oldChild","replaceChild","key","sel","existingAttributes","existing","s","selector","className","parts","value","charAt","class","toggle","contains","classList","removeAttribute","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","controls","getElement","config","selectors","buttons","getElements","play","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","debug","warn","toggleNativeControls","focused","activeElement","focusable","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","plyr","dispatchEvent","toggleState","pressed","getAttribute","state","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","sources","_len","_key","source","shift","defineProperty","extend","apply","concat","toConsumableArray","youtube","vimeo","match","RegExp","$2","parser","search","startsWith","parseUrl","indexOf","reduce","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","offsetHeight","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","transitionEndEvent","matchMedia","noop","Console","enabled","console","log","bind","onChange","button","player","active","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","toggleClass","fallback","Fullscreen","name","_this","stopPropagation","update","native","iosNative","playing","webkitEnterFullscreen","requestFullScreen","webkitExitFullscreen","action","cancelFullScreen","exit","enter","inFrame","fullscreenElement","hasClass","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","exitFullscreen","some","pre","stored","get","toLowerCase","isYouTube","textTracks","setCaptionsMenu","getAttributesFromSelector","insertAfter","getTracks","tracks","isIE","URL","track","hostname","location","protocol","blob","createObjectURL","setLanguage","show","setCue","mode","currentTrack","getCurrentTrack","activeCues","isVimeo","embed","enableTextTrack","filter","_this2","cue","setText","getCueAsHTML","emptyElement","caption","uiSupported","listeners","inject","setup","muted","speed","loop","quality","timeUpdate","checkPlaying","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","stopped","paused","toggleControls","loading","timers","setTimeout","failed","networkState","_this3","setRange","updateRangeFill","getElementsByTagName","nodeValue","getPercentage","setProgress","buffered","invert","invertTime","updateTimeDisplay","seeking","updateProgress","hasDuration","displayDuration","updateSeekTooltip","isWebkit","setProperty","iconUrl","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","suffix","played","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","parseFloat","setting","tab","tabs","pane","panes","toggleTab","createMenuItem","getLabel","createBadge","getBadge","updateSetting","getLanguage","default","none","disabled","hasTracks","toUpperCase","unshift","form","isMenuItem","isButton","clone","position","opacity","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this4","back","setSpeedMenu","loadSprite","seekTime","create","findElements","repaint","labels","_this5","Listeners","lastKey","handleKey","toggleMenu","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","toggleCaptions","keyboard","global","tabFocus","hideControls","durationUpdate","hasAudio","showPosterOnEnd","load","updateVolume","checkLoading","clickToPlay","touch","ended","disableContextMenu","set","inputEvent","proxy","handlerKey","defaultHandler","customHandler","showTab","toggleInvert","hover","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","Storage","store","json","removeItem","Ads","publisherId","ads","initialized","manager","loader","cuePoints","safetyTimer","countdownTimer","managerPromise","google","ima","loadScript","urls","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setInterval","getRemainingTime","advertisement","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","_this6","seekElement","cuePercentage","cues","toString","setVolume","AdEvent","onAdEvent","ad","getAd","_this7","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","handler","_this11","Date","now","base","buildUrlParams","setAspectRatio","YT","Player","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","items","snippet","paddingBottom","currentId","parseYouTubeId","generateId","replaceElement","autoplay","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","getVideoUrl","getAvailablePlaybackRates","buffering","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","Vimeo","padding","offset","transform","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","autopause","getVideoTitle","getTextTracks","stripHTML","seconds","isTouch","wrap","blankVideo","insertElement","attribute","cancelRequests","html5","check","crossorigin","poster","addStyleHook","insertElements","jQuery","original","tagName","getProviderByUrl","getUrlParams","truthy","playsinline","hasAttribute","step","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","soft","clear","unload","mime","readyState","targetTime","end","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,IAAaA,SACF,gBACE,gBACF,SAGEC,SACF,cACA,SCRLC,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,gDAGG,wDAIC,mBAEL,SACA,SACA,SACA,QACA,QACA,SACA,QACA,OACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,aACC,qBAKF,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,yBACK,uBAMN,uDAGA,qDAGA,uEAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,wBACF,oBACI,qBACH,qBACI,oBACD,wBACA,wBACA,sBACF,wBACA,sBACE,qBACH,oBACE,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BAC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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.0.2/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: [\n            'hd2160',\n            'hd1440',\n            'hd1080',\n            'hd720',\n            'large',\n            'medium',\n            'small',\n            'tiny',\n            'default',\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n        advertisement: 'Ad',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n        googleIMA: {\n            api: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        error: 'plyr--has-error',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = path.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\n\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        plyr(input) {\n            return this.instanceof(input, window.Plyr);\n        },\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, window.WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, window.Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        url(input) {\n            return !this.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.querySelectorAll(`#${id}`).length;\n\n        function injectSprite(data) {\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    injectSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    injectSprite.call(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!utils.is.element(element) || !utils.is.string(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: utils.is.plyr(this) ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return this.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = this.getHours(time);\n        const mins = this.getMinutes(time);\n        const secs = this.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{8,}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent(this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.name = Fullscreen.name;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', () => {\n            this.toggle();\n        });\n\n        // Prevent double click on controls bubbling up\n        utils.on(this.player.elements.controls, 'dblclick', event => event.stopPropagation());\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return false;\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get name() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        const fallback = this.player.config.fullscreen.fallback && !utils.inFrame();\n\n        return (Fullscreen.native || fallback) && this.player.config.fullscreen.enabled && this.player.supported.ui && this.player.isVideo;\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.name}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullScreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.name}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            document.cancelFullScreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.name}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // Get tracks\n        const tracks = captions.getTracks.call(this);\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(tracks)) {\n            return;\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Show track\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const { activeCues } = track;\n        const active = activeCues.length && activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Check if media failed to load\n    checkFailed() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState\n        this.failed = this.media.networkState === 3;\n\n        if (this.failed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, false);\n            utils.toggleClass(this.elements.container, this.config.classNames.error, true);\n        }\n\n        // Clear timer\n        clearTimeout(this.timers.failed);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    ui.setProgress.call(this, this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const displayHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = utils.formatTime(time, displayHours, inverted);\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type],\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('div', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type],\n            ),\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.isYouTube;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(this, quality, list, type, controls.getLabel.call(this, 'quality', quality), getBadge(quality)),\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.active ? this.captions.language : '';\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.active) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase(),\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the default speeds\n        if (!utils.is.array(this.options.speed) || !this.options.speed.length) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fastForward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type],\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type],\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // HTML or Element passed as the option\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && utils.matches(focused, this.player.config.selectors.editable)) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.player.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.player.toggleControls(event);\n            });\n        }\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking', event => ui.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.showPosterOnEnd) {\n                // Restart\n                this.player.restart();\n\n                // Re-load media\n                this.player.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing', event => ui.updateProgress.call(this.player, event));\n\n        // Handle native mute\n        utils.on(this.player.media, 'volumechange', event => ui.updateVolume.call(this.player, event));\n\n        // Handle native play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // Check if media failed to load\n        // utils.on(this.player.media, 'play', event => ui.checkFailed.call(this.player, event));\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && support.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality');\n\n            // Save to storage\n            this.player.storage.set({ quality: this.player.quality });\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.player.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.player.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.player.togglePlay();\n            }),\n        );\n\n        // Pause\n        utils.on(this.player.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.player.restart();\n            }),\n        );\n\n        // Rewind\n        utils.on(this.player.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.player.rewind();\n            }),\n        );\n\n        // Rewind\n        utils.on(this.player.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.player.forward();\n            }),\n        );\n\n        // Mute toggle\n        utils.on(this.player.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.player.muted = !this.player.muted;\n            }),\n        );\n\n        // Captions toggle\n        utils.on(this.player.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.player.toggleCaptions();\n            }),\n        );\n\n        // Fullscreen toggle\n        utils.on(this.player.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.player.fullscreen.toggle();\n            }),\n        );\n\n        // Picture-in-Picture\n        utils.on(this.player.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.player.pip = 'toggle';\n            }),\n        );\n\n        // Airplay\n        utils.on(this.player.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.player.airplay();\n            }),\n        );\n\n        // Settings menu\n        utils.on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        utils.on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.player.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.player.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.player.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this.player, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.player.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.player.currentTime = event.target.value / event.target.max * this.player.duration;\n            }),\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            utils.on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n                ui.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        utils.on(this.player.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.player.volume = event.target.value;\n            }),\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n                this.player.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.player.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            utils.on(this.player.elements.controls, 'focusin focusout', event => {\n                this.player.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.player.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.player.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.player.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.player.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.enabled = player.isHTML5 && player.isVideo && player.config.ads.enabled && utils.is.string(this.publisherId) && this.publisherId.length;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.api)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${this.player.config.i18n.advertisement} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        this.cuePoints.forEach(cuePoint => {\n            if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                const seekElement = this.player.elements.progress;\n\n                if (seekElement) {\n                    const cuePercentage = 100 / this.player.duration * cuePoint;\n                    const cue = utils.createElement('span', {\n                        class: this.player.config.classNames.cues,\n                    });\n\n                    cue.style.left = `${cuePercentage.toString()}%`;\n                    seekElement.appendChild(cue);\n                }\n            }\n        });\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.manager.getAdSkippableState();\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    console.warn(event.data);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.api)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 240;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div');\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(this.media.querySelectorAll('source'));\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.0.2\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport Console from './console';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport Storage from './storage';\nimport Ads from './plugins/ads';\n\nimport captions from './captions';\nimport controls from './controls';\nimport media from './media';\nimport source from './source';\nimport ui from './ui';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.playsinline)) {\n                            this.config.inline = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // If ads are enabled, wait for them first\n        if (this.ads.enabled && !this.ads.initialized) {\n            return this.ads.managerPromise.then(() => this.ads.play()).catch(() => this.media.play());\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(!this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true));\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.media.load();\n        } else {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = parseFloat(targetTime.toFixed(4));\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = this.media ? Number(this.media.duration) : 0;\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.debug.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.debug.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = [\n                    'mouseenter',\n                    'mousemove',\n                    'touchstart',\n                    'touchmove',\n                    'focusin',\n                ].includes(toggle.type);\n\n                // Delay hiding on move events\n                if ([\n                    'mousemove',\n                    'touchmove',\n                    'touchend',\n                ].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n}\n\nexport default Plyr;\n"]}